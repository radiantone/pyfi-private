version: 2.1

orbs:
  python: circleci/python@1.5.0
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0
  node: circleci/node@5.1.0
  jira: circleci/jira@1.3.1

jobs:
  build-and-test:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - run: cat ui/auth_config.json
      - run: mkdir -p ./workspace/certs
      - run: echo "$elasticcode_crt" > ./workspace/certs/elasticcode.crt
      - run: echo "$elasticcode_app_crt" > ./workspace/certs/elasticcode-app.crt
      - run: echo "$elasticcode_key" > ./workspace/certs/elasticcode.key
      - run: ls -l ./workspace/certs
      - node/install:
          node-version: '14.18.1'
      - run: npm install -g --force @quasar/cli@1.3.2  @quasar/app@2.4.3 quasar@1.22.1  @quasar/extras@1.15.5 @quasar/quasar-app-extension-qmarkdown@1.4.4
      - run: npm install -g typescript
      - run: npm update -g @quasar/cli
      - persist_to_workspace:
           root: workspace
           paths:
             - certs/elasticcode.crt
             - certs/elasticcode-app.crt
             - certs/elasticcode.key
      - run:
          name: APT update
          command: 'sudo apt update'
      - run:
          name: Install Gevent
          command: 'pip install gevent'
      - run:
            name: Installing g++
            command: 'sudo apt install -y python3-gevent libev-dev build-essential'
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Install UI
          command: make install-ui
          no_output_timeout: 40m
      - run:
          name: npm ls
          command: npm ls
      - run:
          name: Patch UI
          command: cp ui/patches/jsplumbtoolkit-latest.js ui/node_modules/jsplumbtoolkit/dist/js/jsplumbtoolkit.js
      - run:
          name: Build UI
          command: SOCKETIO=https://app.elasticcode.ai make ui
      - run:
          name: Copy UI
          command: mkdir -p workspace/ui/dist/spa; cp -r ui/dist/spa/* workspace/ui/dist/spa/
      - persist_to_workspace:
          root: workspace
          paths:
            - ui/dist/spa
      - run:
          name: Run tests
          command: make test

workflows:
  build-and-push:
    jobs:
      - build-and-test:
          post-steps:
            - jira/notify
      - aws-ecr/build-and-push-image:
          name: build-nginx
          requires:
            - build-and-test
          attach-workspace: true
          workspace-root: workspace
          aws-cli-version: latest
          create-repo: true
          dockerfile: Dockerfile.nginx.prod
          extra-build-args: '--compress --build-arg COMMIT=$CIRCLE_SHA1 --build-arg BUILD_URL=$CIRCLE_BUILD_URL --build-arg REPO_URL=$CIRCLE_REPOSITORY_URL'
          path: ./docker
          platform: linux/amd64
          public-registry: false
          push-image: true
          repo: nginx
          remote-docker-version: '24.0.2'
          repo-scan-on-push: true
          tag: 'production'
          post-steps:
              - aws-ecr/tag-image:
                  repo: nginx
                  source-tag: 'production'
                  target-tag: $CIRCLE_BUILD_NUM
              - aws-ecr/tag-image:
                  repo: nginx
                  source-tag: 'production'
                  target-tag: $CIRCLE_SHA1
              - jira/notify:
                  environment_type: production
                  job_type: deployment
      - aws-ecr/build-and-push-image:
          name: build-api
          executor:
            name: aws-ecr/default
            image: "ubuntu-2004:2023.04.2"
          requires:
            - build-and-test
          attach-workspace: true
          workspace-root: certs
          aws-cli-version: latest
          create-repo: true
          dockerfile: Dockerfile.api
          extra-build-args: '--compress'
          path: ./docker
          platform: linux/amd64
          public-registry: false
          push-image: true
          repo: api
          repo-scan-on-push: true
          tag: 'production'
          post-steps:
              - aws-ecr/tag-image:
                  repo: api
                  source-tag: 'production'
                  target-tag: $CIRCLE_BUILD_NUM
              - aws-ecr/tag-image:
                  repo: api
                  source-tag: 'production'
                  target-tag: $CIRCLE_SHA1
              - jira/notify:
                  environment_type: production
                  job_type: deployment
      - aws-ecr/build-and-push-image:
          name: build-socket
          requires:
            - build-and-test
          attach-workspace: true
          aws-cli-version: latest
          create-repo: true
          context: ./socket
          dockerfile: Dockerfile.prod
          extra-build-args: '--compress'
          path: ./socket
          platform: linux/amd64
          public-registry: false
          push-image: true
          repo: clientsocket
          repo-scan-on-push: true
          tag: 'production'
          post-steps:
              - aws-ecr/tag-image:
                  repo: clientsocket
                  source-tag: 'production'
                  target-tag: $CIRCLE_BUILD_NUM
              - aws-ecr/tag-image:
                  repo: clientsocket
                  source-tag: 'production'
                  target-tag: $CIRCLE_SHA1
              - jira/notify:
                  environment_type: production
                  job_type: deployment