# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  aws-ecr: circleci/aws-ecr@8.2.1
  aws-ecs: circleci/aws-ecs@3.2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.10.2 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.10.2
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run: mkdir certs
      - run: echo $elasticcode_crt > certs/elasticcode.crt
      - run: echo $elasticcodeapp_crt > certs/elasticcode.crt
      - run: echo $elasticcode_key > certs/elasticcode.key
      - run:
          name: APT update
          command: 'sudo apt update'
      - run:
          name: APT update
          command: 'pip install gevent'
      - run:
            name: Installing g++
            command: 'sudo apt install -y python3-gevent libev-dev build-essential'
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: make test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build-and-push:
    jobs:
      - build-and-test
      - aws-ecr/build-and-push-image:
          aws-cli-version: latest
          create-repo: true
          dockerfile: Dockerfile.nginx
          extra-build-args: '--compress'
          path: ./docker
          platform: linux/amd64
          public-registry: false
          push-image: true
          repo: nginx
          repo-scan-on-push: true
          tag: 'latest'
      - aws-ecr/build-and-push-image:
          aws-cli-version: latest
          create-repo: true
          dockerfile: Dockerfile.api
          extra-build-args: '--compress'
          path: ./docker
          platform: linux/amd64
          public-registry: false
          push-image: true
          repo: api
          repo-scan-on-push: true
          tag: 'latest'