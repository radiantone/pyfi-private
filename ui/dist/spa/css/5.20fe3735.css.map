{"version":3,"sources":["/home/darren/PycharmProjects/pyfi/ui/src/components/templates/src/components/templates/LayoutTemplate.vue","/home/darren/PycharmProjects/pyfi/ui/src/layouts/src/layouts/AppLayout.vue"],"names":[],"mappings":"AA0IA,oCACA,WAAA,CACA,iBAAA,CACA,kBAAA,CACA,qBAAA,CACA,aAAA,CACA,YACA,CAEA,kCACA,eACA,CAEA,2DACA,eAAA,CACA,qBACA,CAEA,0CACA,WACA,CAEA,wCACA,eACA,CAEA,sCACA,cAAA,CACA,iBAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,MAAA,CACA,OAAA,CACA,WAAA,CACA,WAAA,CACA,UACA,CAEA,yCACA,WAAA,CACA,UACA,CAEA,wCACA,cACA,CAEA,qCACA,cACA,CAEA,uCACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,KAAA,CACA,MAAA,CACA,qKAAA,CACA,6BAAA,CACA,mBAAA,CACA,2BAAA,CACA,6BAAA,CACA,qBAAA,CACA,cACA,CASA,6BACA,eAAA,CACA,qBAAA,CACA,eAAA,CACA,YACA,CAEA,0BAGA,aACA,CC/FA,oCACA,sBACA","file":"5.20fe3735.css","sourcesContent":["<template>\n  <div>\n    <div id=\"content\">\n      <grid-layout\n        ref=\"gridlayout\"\n        :layout.sync=\"layout\"\n        :col-num=\"colNum\"\n        :row-height=\"30\"\n        :is-draggable=\"true\"\n        :is-resizable=\"true\"\n        :vertical-compact=\"true\"\n        :use-css-transforms=\"true\"\n      >\n        <grid-item\n          :key=\"item.i\"\n          v-for=\"item in layout\"\n          :x=\"item.x\"\n          :y=\"item.y\"\n          :w=\"item.w\"\n          :h=\"item.h\"\n          :i=\"item.i\"\n        >\n          <span class=\"text\"><div v-html=\"item.html\" /></span>\n        </grid-item>\n      </grid-layout>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { GridLayout, GridItem } from 'vue-grid-layout'\n\nconst mouseXY = { x: null, y: null }\nconst DragPos = { x: null, y: null, w: 1, h: 1, i: null }\n\nexport default {\n  name: 'LayoutTemplate',\n  components: {\n    GridLayout,\n    GridItem\n  },\n  data () {\n    return {\n      layout: [\n        { x: 0, y: 0, w: 12, h: 6, i: '0' },\n        { x: 0, y: 7, w: 4, h: 8, i: '1' },\n        { x: 4, y: 7, w: 4, h: 8, i: '2' },\n        { x: 8, y: 7, w: 4, h: 8, i: '3' }\n      ],\n      draggable: true,\n      resizable: true,\n      colNum: 12,\n      index: 0\n    }\n  },\n  mounted () {\n    document.addEventListener('dragover', function (e) {\n      mouseXY.x = e.clientX\n      mouseXY.y = e.clientY\n    }, false)\n  },\n  beforeDestroy () {\n  },\n  methods: {\n    drag: function (e) {\n      debugger\n      const parentRect = document.getElementById('content').getBoundingClientRect()\n      let mouseInGrid = false\n      if (((mouseXY.x > parentRect.left) && (mouseXY.x < parentRect.right)) && ((mouseXY.y > parentRect.top) && (mouseXY.y < parentRect.bottom))) {\n        mouseInGrid = true\n      }\n      if (mouseInGrid === true && (this.layout.findIndex(item => item.i === 'drop')) === -1) {\n        debugger\n        this.layout.push({\n          x: (this.layout.length * 2) % (this.colNum || 12),\n          y: this.layout.length + (this.colNum || 12), // puts it at the bottom\n          w: 1,\n          h: 1,\n          i: 'drop'\n        })\n      }\n      const index = this.layout.findIndex(item => item.i === 'drop')\n      if (index !== -1) {\n        try {\n          this.$refs.gridlayout.$children[this.layout.length].$refs.item.style.display = 'none'\n        } catch {\n        }\n        const el = this.$refs.gridlayout.$children[index]\n        el.dragging = { top: mouseXY.y - parentRect.top, left: mouseXY.x - parentRect.left }\n        const new_pos = el.calcXY(mouseXY.y - parentRect.top, mouseXY.x - parentRect.left)\n\n        if (mouseInGrid === true) {\n          this.$refs.gridlayout.dragEvent('dragstart', 'drop', new_pos.x, new_pos.y, 1, 1)\n          DragPos.i = String(index)\n          DragPos.x = this.layout[index].x\n          DragPos.y = this.layout[index].y\n        }\n        if (mouseInGrid === false) {\n          this.$refs.gridlayout.dragEvent('dragend', 'drop', new_pos.x, new_pos.y, 1, 1)\n          this.layout = this.layout.filter(obj => obj.i !== 'drop')\n        }\n      }\n    },\n    dragend: function (e) {\n      debugger\n      const parentRect = document.getElementById('content').getBoundingClientRect()\n      let mouseInGrid = false\n      if (((mouseXY.x > parentRect.left) && (mouseXY.x < parentRect.right)) && ((mouseXY.y > parentRect.top) && (mouseXY.y < parentRect.bottom))) {\n        mouseInGrid = true\n      }\n      if (mouseInGrid === true) {\n        alert(`Dropped element props:\\n${JSON.stringify(DragPos, ['x', 'y', 'w', 'h'], 2)}`)\n        this.$refs.gridlayout.dragEvent('dragend', 'drop', DragPos.x, DragPos.y, 1, 1)\n        this.layout = this.layout.filter(obj => obj.i !== 'drop')\n\n        // UNCOMMENT below if you want to add a grid-item\n        /*\n                this.layout.push({\n                    x: DragPos.x,\n                    y: DragPos.y,\n                    w: 1,\n                    h: 1,\n                    i: DragPos.i,\n                });\n                this.$refs.gridLayout.dragEvent('dragend', DragPos.i, DragPos.x,DragPos.y,1,1);\n                try {\n                    this.$refs.gridLayout.$children[this.layout.length].$refs.item.style.display=\"block\";\n                } catch {\n                }\n                */\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n.droppable-element {\n    width: 150px;\n    text-align: center;\n    background: #ecffdd;\n    border: 1px solid black;\n    margin: 10px 0;\n    padding: 10px;\n}\n\n.vue-grid-layout {\n    background: #eee;\n}\n\n.vue-grid-item:not(.vue-grid-placeholder) {\n    background: #ccc;\n    border: 1px solid black;\n}\n\n.vue-grid-item .resizing {\n    opacity: 0.9;\n}\n\n.vue-grid-item .static {\n    background: #cce;\n}\n\n.vue-grid-item .text {\n    font-size: 24px;\n    text-align: center;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n    height: 100%;\n    width: 100%;\n}\n\n.vue-grid-item .no-drag {\n    height: 100%;\n    width: 100%;\n}\n\n.vue-grid-item .minMax {\n    font-size: 12px;\n}\n\n.vue-grid-item .add {\n    cursor: pointer;\n}\n\n.vue-draggable-handle {\n    position: absolute;\n    width: 20px;\n    height: 20px;\n    top: 0;\n    left: 0;\n    background: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10'><circle cx='5' cy='5' r='5' fill='#999999'/></svg>\") no-repeat;\n    background-position: bottom right;\n    padding: 0 8px 8px 0;\n    background-repeat: no-repeat;\n    background-origin: content-box;\n    box-sizing: border-box;\n    cursor: pointer;\n}\n\n.layoutJSON {\n    background: #ddd;\n    border: 1px solid black;\n    margin-top: 10px;\n    padding: 10px;\n}\n\n.layoutJSON {\n    background: #ddd;\n    border: 1px solid black;\n    margin-top: 10px;\n    padding: 10px;\n}\n\n.columns {\n    -moz-columns: 120px;\n    -webkit-columns: 120px;\n    columns: 120px;\n}\n</style>\n","<template>\n  <q-layout\n    view=\"lHh Lpr lFf\"\n    class=\"bg-white\"\n  >\n    <q-header elevated>\n      <q-toolbar style=\"background-color:#0ca940\">\n        <q-btn\n          flat\n          dense\n          round\n          @click=\"leftDrawerOpen=!leftDrawerOpen\"\n          aria-label=\"Menu\"\n          icon=\"menu\"\n        />\n\n        <q-toolbar-title>\n          Customer Portal\n        </q-toolbar-title>\n      </q-toolbar>\n    </q-header>\n\n    <q-drawer\n      v-model=\"leftDrawerOpen\"\n      show-if-above\n      bordered\n      class=\"bg-grey-2\"\n    >\n      <q-list>\n        <q-item-label header style=\"font-size: 1.5em\">\n          Component Palette\n        </q-item-label>\n        <q-item @drag=\"drag\" @dragend=\"dragend\" draggable=\"true\"\n                unselectable=\"on\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"image\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Banner</q-item-label>\n            <q-item-label caption>\n              Application Image Banner\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item @drag=\"drag\" @dragend=\"dragend\" draggable=\"true\"\n                unselectable=\"on\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"group\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Customers</q-item-label>\n            <q-item-label caption>\n              Customer Data List\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item @drag=\"drag\" @dragend=\"dragend\" draggable=\"true\"\n                unselectable=\"on\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"las la-tractor\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Farms</q-item-label>\n            <q-item-label caption>\n              Customer Farms List\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item @drag=\"drag\" @dragend=\"dragend\" draggable=\"true\"\n                unselectable=\"on\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"grass\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Fields</q-item-label>\n            <q-item-label caption>\n              Customer Farm Fields\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item @drag=\"drag\" @dragend=\"dragend\" draggable=\"true\"\n                unselectable=\"on\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"cloud\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Weather</q-item-label>\n            <q-item-label caption>\n              Weather Widget\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n        <q-item\n          clickable\n          @click=\"$router.push('/')\"\n        >\n          <q-item-section avatar>\n            <q-icon size=\"lg\" color=\"grey-7\" name=\"architecture\"/>\n          </q-item-section>\n          <q-item-section>\n            <q-item-label>Designer</q-item-label>\n            <q-item-label caption>\n              Back to Designer\n            </q-item-label>\n          </q-item-section>\n        </q-item>\n      </q-list>\n    </q-drawer>\n\n    <q-page-container>\n      <LayoutTemplate ref=\"layout\"/>\n      <div class=\"q-pa-md\" style=\"max-width: 1200px; max-height:600px\">\n        <q-input\n          v-model=\"text\"\n          filled\n          type=\"textarea\"\n        />\n        <q-btn label=\"Fetch\" @click=\"fetch\"></q-btn>\n      </div>\n    </q-page-container>\n  </q-layout>\n</template>\n<style>\n.vue-grid-item.vue-grid-placeholder {\n        display: none !important;\n    }\n</style>\n<script>\nimport DataService from \"components/util/DataService\"\nimport LayoutTemplate from \"components/templates/LayoutTemplate.vue\"\n\nlet mouseXY = {\"x\": null, \"y\": null};\nlet DragPos = {\"x\": null, \"y\": null, \"w\": 1, \"h\": 1, \"i\": null};\n\nexport default {\n  name: 'AppLayout',\n  components: {\n    LayoutTemplate\n  },\n  data() {\n    return {\n      leftDrawerOpen: false,\n      text: \"No Data\",\n      index: 0\n    }\n  },\n  mounted() {\n    DataService.getMock().then((res) => {\n      console.log(\"DATA MOCK FROM APP\", res)\n    })\n    document.addEventListener(\"dragover\", function (e) {\n      mouseXY.x = e.clientX;\n      mouseXY.y = e.clientY;\n    }, false);\n  },\n  methods: {\n    drag: function (e) {\n      let parentRect = document.getElementById('content').getBoundingClientRect();\n      let mouseInGrid = false;\n      if (((mouseXY.x > parentRect.left) && (mouseXY.x < parentRect.right)) && ((mouseXY.y > parentRect.top) && (mouseXY.y < parentRect.bottom))) {\n        mouseInGrid = true;\n      }\n      if (mouseInGrid === true && (this.$refs.layout.layout.findIndex(item => item.i === 'drop')) === -1) {\n        this.$refs.layout.layout.push({\n          x: DragPos.x,\n          y: DragPos.y, // puts it at the bottom\n          w: 2,\n          h: 2,\n          i: 'drop',\n        });\n      }\n      let index = this.$refs.layout.layout.findIndex(item => item.i === 'drop');\n\n      if (index !== -1) {\n        let el = this.$refs.layout.$refs.gridlayout.$children[index];\n\n        el.dragging = {\"top\": mouseXY.y - parentRect.top, \"left\": mouseXY.x - parentRect.left};\n        let new_pos = el.calcXY(mouseXY.y - parentRect.top, mouseXY.x - parentRect.left);\n\n        if (mouseInGrid === true) {\n          this.$refs.layout.$refs.gridlayout.dragEvent('dragstart', 'drop', new_pos.x, new_pos.y, 1, 1);\n          DragPos.i = String(index);\n          DragPos.x = this.$refs.layout.layout[index].x;\n          DragPos.y = this.$refs.layout.layout[index].y;\n        }\n        if (mouseInGrid === false) {\n          this.$refs.layout.$refs.gridlayout.dragEvent('dragend', 'drop', new_pos.x, new_pos.y, 1, 1);\n          this.$refs.layout.layout = this.$refs.layout.layout.filter(obj => obj.i !== 'drop');\n        }\n      }\n    },\n    dragend: function (e) {\n      let parentRect = document.getElementById('content').getBoundingClientRect();\n      let mouseInGrid = false;\n      if (((mouseXY.x > parentRect.left) && (mouseXY.x < parentRect.right)) && ((mouseXY.y > parentRect.top) && (mouseXY.y < parentRect.bottom))) {\n        mouseInGrid = true;\n      }\n      if (mouseInGrid === true) {\n\n        this.$refs.layout.$refs.gridlayout.dragEvent('dragend', 'drop', DragPos.x, DragPos.y, 1, 1);\n        this.$refs.layout.layout = this.$refs.layout.layout.filter(obj => obj.i !== 'drop');\n        this.$refs.layout.layout.push({\n          x: DragPos.x,\n          y: DragPos.y, // puts it at the bottom\n          w: 2,\n          h: 2,\n          html: \"<b>HI THERE!</b>\",\n          i: this.index,\n        });\n        this.index++;\n\n        /*\n          this.$refs.layout.layout.push({\n              x: DragPos.x,\n              y: DragPos.y, // puts it at the bottom\n              w: 2,\n              h: 2,\n              i: this.$refs.layout.layout.length,\n          });\n\n\n          this.$refs.layout.$refs.gridlayout.dragEvent('dragend', DragPos.i, DragPos.x,DragPos.y,1,1);\n          try {\n              this.$refs.layout.$refs.gridlayout.$children[this.$refs.layout.layout.length].$refs.item.style.display=\"block\";\n          } catch {\n          }\n         */\n      }\n    },\n    toggleLeftDrawer() {\n      leftDrawerOpen.value = !leftDrawerOpen.value\n    },\n    fetch() {\n      DataService.getMock().then((res) => {\n        this.text = JSON.stringify(res.data)\n      })\n    }\n  }\n}\n</script>\n"]}