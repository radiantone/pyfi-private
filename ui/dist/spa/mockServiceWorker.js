const INTEGRITY_CHECKSUM="3d6b9f06410d179a7f7404d4bf4c3c70",activeClientIds=new Set;async function handleRequest(e,t){const n=await resolveMainClient(e),s=await getResponse(e,n,t);return n&&activeClientIds.has(n.id)&&async function(){const e=s.clone();sendToClient(n,{type:"RESPONSE",payload:{requestId:t,type:e.type,ok:e.ok,status:e.status,statusText:e.statusText,body:null===e.body?null:await e.text(),headers:Object.fromEntries(e.headers.entries()),redirected:e.redirected}})}(),s}async function resolveMainClient(e){const t=await self.clients.get(e.clientId);if("top-level"===t?.frameType)return t;const n=await self.clients.matchAll({type:"window"});return n.filter((e=>"visible"===e.visibilityState)).find((e=>activeClientIds.has(e.id)))}async function getResponse(e,t,n){const{request:s}=e,r=s.clone();function a(){const e=Object.fromEntries(r.headers.entries());return delete e["x-msw-bypass"],fetch(r,{headers:e})}if(!t)return a();if(!activeClientIds.has(t.id))return a();if("true"===s.headers.get("x-msw-bypass"))return a();const i=await sendToClient(t,{type:"REQUEST",payload:{id:n,url:s.url,method:s.method,headers:Object.fromEntries(s.headers.entries()),cache:s.cache,mode:s.mode,credentials:s.credentials,destination:s.destination,integrity:s.integrity,redirect:s.redirect,referrer:s.referrer,referrerPolicy:s.referrerPolicy,body:await s.text(),bodyUsed:s.bodyUsed,keepalive:s.keepalive}});switch(i.type){case"MOCK_RESPONSE":return respondWithMock(i.data);case"MOCK_NOT_FOUND":return a();case"NETWORK_ERROR":{const{name:e,message:t}=i.data,n=new Error(t);throw n.name=e,n}}return a()}function sendToClient(e,t){return new Promise(((n,s)=>{const r=new MessageChannel;r.port1.onmessage=e=>{if(e.data&&e.data.error)return s(e.data.error);n(e.data)},e.postMessage(t,[r.port2])}))}function sleep(e){return new Promise((t=>{setTimeout(t,e)}))}async function respondWithMock(e){return await sleep(e.delay),new Response(e.body,e)}self.addEventListener("install",(function(){self.skipWaiting()})),self.addEventListener("activate",(function(e){e.waitUntil(self.clients.claim())})),self.addEventListener("message",(async function(e){const t=e.source.id;if(!t||!self.clients)return;const n=await self.clients.get(t);if(!n)return;const s=await self.clients.matchAll({type:"window"});switch(e.data){case"KEEPALIVE_REQUEST":sendToClient(n,{type:"KEEPALIVE_RESPONSE"});break;case"INTEGRITY_CHECK_REQUEST":sendToClient(n,{type:"INTEGRITY_CHECK_RESPONSE",payload:INTEGRITY_CHECKSUM});break;case"MOCK_ACTIVATE":activeClientIds.add(t),sendToClient(n,{type:"MOCKING_ENABLED",payload:!0});break;case"MOCK_DEACTIVATE":activeClientIds.delete(t);break;case"CLIENT_CLOSED":{activeClientIds.delete(t);const e=s.filter((e=>e.id!==t));0===e.length&&self.registration.unregister();break}}})),self.addEventListener("fetch",(function(e){const{request:t}=e,n=t.headers.get("accept")||"";if(n.includes("text/event-stream"))return;if("navigate"===t.mode)return;if("only-if-cached"===t.cache&&"same-origin"!==t.mode)return;if(0===activeClientIds.size)return;const s=Math.random().toString(16).slice(2);e.respondWith(handleRequest(e,s).catch((e=>{"NetworkError"!==e.name?console.error('[MSW] Caught an exception from the "%s %s" request (%s). This is probably not a problem with Mock Service Worker. There is likely an additional logging output above.',t.method,t.url,`${e.name}: ${e.message}`):console.warn('[MSW] Successfully emulated a network error for the "%s %s" request.',t.method,t.url)})))}));