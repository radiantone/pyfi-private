{
	"nodes": [
		{
			"icon": "fab fa-python",
			"style": "",
			"type": "script",
			"name": "Script",
			"label": "Script",
			"description": "A script description",
			"package": "my.python.package",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 514,
			"top": 126,
			"x": 518,
			"y": 129.5,
			"id": "e648444c-939a-4388-b18b-9b7d7b43d448",
			"titletab": false,
			"receipt": "2023-01-26T19:51:45.543Z",
			"notes": "",
			"version": "v1.2.2",
			"perworker": true,
			"ratelimit": "60",
			"websocket": "ws://localhost:3003",
			"bandwidth": true,
			"requirements": "",
			"gittag": "",
			"container": true,
			"imagerepo": "local",
			"containerimage": "pyfi/processors:latest",
			"environment": "",
			"usegit": true,
			"enabled": true,
			"endpoint": false,
			"beat": false,
			"streaming": true,
			"api": "/api/processor",
			"concurrency": 3,
			"cron": "* * * * *",
			"interval": -1,
			"useschedule": false,
			"commit": "",
			"gitrepo": "https://github.com/radiantone/pyfi-processors#egg=ext-processor",
			"modulepath": "ext/processors/sample.py",
			"readwrite": 0,
			"status": "stopped",
			"code": "def open_url(url):\n    from pyodide.http import open_url\n    import json\n    \n    return json.loads(open_url(url).read())\n\ndef fetch():\n    url = \"http://worldtimeapi.org/api/ip\"\n\n    plugs['route A'] = {'some':'data'}\n    return open_url(url)\n    \ndef add_data(data):\n    data['add'] = 'newdata'\n\n    return data\n\ndef emit_one(one, *args, plugs={}, output={}, **kwargs):\n    \"\"\" emit one \"\"\"\n    if one: return one\n    return 1\n\n\ndef emit_two(two, *args, plugs={}, output={}, **kwargs):\n    if two: return two\n    return 5\n\n\ndef add_two(one, two, *args, plugs={}, output={}, **kwargs):\n    return int(one) + int(two)\n\n\ndef emit_add(one, five, *args, plugs={}, output={}, **kwargs):\n    print(\"EMIT_ADD: \", int(one) + int(five))\n    return int(one) + int(five)\n\n\ndef do_something(message, *args, plugs={}, output={}, **kwargs):\n    \"\"\" do_something \"\"\"\n    from random import randrange\n\n    print(\"PLUGS:\", plugs)\n    print(\"DO SOMETHING ELSE!\")\n    print(\"Message:\", message)\n\n    plugs['plug1'] = [\"Message \" + str(message)]\n\n    output['result'] = \"The result!\"\n    output['data'] = {'key': 'result'}\n\n    argstr = ' '.join(args)\n    message = \"TEXT:\" + str(message) + argstr\n    value = randrange(10)\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'temperature', 'value': value}\n    print(\"doSomething: GRAPH COMPLETE!\")\n    print(\"doSomething: VALUE\", value)\n    # raise Exception()\n    return {'message': message, 'graph': graph}\n\n\ndef do_this(message, *args, plugs={}, output={}, **kwargs):\n    from random import randrange\n\n    print(\"Do this!\", message)\n\n    argstr = ' '.join(args)\n    message = \"Do this String: \" + str(message) + argstr\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'distance', 'value': randrange(50)}\n    print(\"doThis: GRAPH CREATED!\")\n    return {'message': message, 'graph': graph}\n\n\ndef do_that(message, *args, plugs={}, output={}, **kwargs):\n    print(\"Do THAT!\", message)\n\n    argstr = ' '.join(args)\n    return \"Do THAT: \" + str(message) + argstr\n"
		},
		{
			"icon": "fab fa-python",
			"style": "",
			"type": "script",
			"name": "Script",
			"label": "Script",
			"description": "A script description",
			"package": "my.python.package",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 521,
			"top": 582,
			"x": 523,
			"y": 576.5,
			"id": "55d772c2-7560-4e0f-9778-87e1588f3a42",
			"titletab": false,
			"receipt": "2023-01-26T19:51:51.337Z",
			"notes": "",
			"version": "v1.2.2",
			"perworker": true,
			"ratelimit": "60",
			"websocket": "ws://localhost:3003",
			"bandwidth": true,
			"requirements": "",
			"gittag": "",
			"container": true,
			"imagerepo": "local",
			"containerimage": "pyfi/processors:latest",
			"environment": "",
			"usegit": true,
			"enabled": true,
			"endpoint": false,
			"beat": false,
			"streaming": true,
			"api": "/api/processor",
			"concurrency": 3,
			"cron": "* * * * *",
			"interval": -1,
			"useschedule": false,
			"commit": "",
			"gitrepo": "https://github.com/radiantone/pyfi-processors#egg=ext-processor",
			"modulepath": "ext/processors/sample.py",
			"readwrite": 0,
			"status": "stopped",
			"code": "def open_url(url):\n    from pyodide.http import open_url\n    import json\n    \n    return json.loads(open_url(url).read())\n\ndef fetch():\n    url = \"http://worldtimeapi.org/api/ip\"\n\n    plugs['route A'] = {'some':'data'}\n    return open_url(url)\n    \ndef add_data(data):\n    data['add'] = 'newdata'\n\n    return data\n\ndef emit_one(one, *args, plugs={}, output={}, **kwargs):\n    \"\"\" emit one \"\"\"\n    if one: return one\n    return 1\n\n\ndef emit_two(two, *args, plugs={}, output={}, **kwargs):\n    if two: return two\n    return 5\n\n\ndef add_two(one, two, *args, plugs={}, output={}, **kwargs):\n    return int(one) + int(two)\n\n\ndef emit_add(one, five, *args, plugs={}, output={}, **kwargs):\n    print(\"EMIT_ADD: \", int(one) + int(five))\n    return int(one) + int(five)\n\n\ndef do_something(message, *args, plugs={}, output={}, **kwargs):\n    \"\"\" do_something \"\"\"\n    from random import randrange\n\n    print(\"PLUGS:\", plugs)\n    print(\"DO SOMETHING ELSE!\")\n    print(\"Message:\", message)\n\n    plugs['plug1'] = [\"Message \" + str(message)]\n\n    output['result'] = \"The result!\"\n    output['data'] = {'key': 'result'}\n\n    argstr = ' '.join(args)\n    message = \"TEXT:\" + str(message) + argstr\n    value = randrange(10)\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'temperature', 'value': value}\n    print(\"doSomething: GRAPH COMPLETE!\")\n    print(\"doSomething: VALUE\", value)\n    # raise Exception()\n    return {'message': message, 'graph': graph}\n\n\ndef do_this(message, *args, plugs={}, output={}, **kwargs):\n    from random import randrange\n\n    print(\"Do this!\", message)\n\n    argstr = ' '.join(args)\n    message = \"Do this String: \" + str(message) + argstr\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'distance', 'value': randrange(50)}\n    print(\"doThis: GRAPH CREATED!\")\n    return {'message': message, 'graph': graph}\n\n\ndef do_that(message, *args, plugs={}, output={}, **kwargs):\n    print(\"Do THAT!\", message)\n\n    argstr = ' '.join(args)\n    return \"Do THAT: \" + str(message) + argstr\n"
		},
		{
			"icon": "fab fa-python",
			"style": "",
			"type": "script",
			"name": "Script",
			"label": "Script",
			"description": "A script description",
			"package": "my.python.package",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 1157,
			"top": 327,
			"x": 1147,
			"y": 346.5,
			"id": "db8d20e2-b051-41bb-9009-bcd18bb2562f",
			"titletab": false,
			"receipt": "2023-01-26T19:51:55.160Z",
			"notes": "",
			"version": "v1.2.2",
			"perworker": true,
			"ratelimit": "60",
			"websocket": "ws://localhost:3003",
			"bandwidth": true,
			"requirements": "",
			"gittag": "",
			"container": true,
			"imagerepo": "local",
			"containerimage": "pyfi/processors:latest",
			"environment": "",
			"usegit": true,
			"enabled": true,
			"endpoint": false,
			"beat": false,
			"streaming": true,
			"api": "/api/processor",
			"concurrency": 3,
			"cron": "* * * * *",
			"interval": -1,
			"useschedule": false,
			"commit": "",
			"gitrepo": "https://github.com/radiantone/pyfi-processors#egg=ext-processor",
			"modulepath": "ext/processors/sample.py",
			"readwrite": 0,
			"status": "stopped",
			"code": "def open_url(url):\n    from pyodide.http import open_url\n    import json\n    \n    return json.loads(open_url(url).read())\n\ndef fetch():\n    url = \"http://worldtimeapi.org/api/ip\"\n\n    plugs['route A'] = {'some':'data'}\n    return open_url(url)\n    \ndef add_data(data):\n    data['add'] = 'newdata'\n\n    return data\n\ndef emit_one(one, *args, plugs={}, output={}, **kwargs):\n    \"\"\" emit one \"\"\"\n    if one: return one\n    return 1\n\n\ndef emit_two(two, *args, plugs={}, output={}, **kwargs):\n    if two: return two\n    return 5\n\n\ndef add_two(one, two, *args, plugs={}, output={}, **kwargs):\n    return int(one) + int(two)\n\n\ndef emit_add(one, five, *args, plugs={}, output={}, **kwargs):\n    print(\"EMIT_ADD: \", int(one) + int(five))\n    return int(one) + int(five)\n\n\ndef do_something(message, *args, plugs={}, output={}, **kwargs):\n    \"\"\" do_something \"\"\"\n    from random import randrange\n\n    print(\"PLUGS:\", plugs)\n    print(\"DO SOMETHING ELSE!\")\n    print(\"Message:\", message)\n\n    plugs['plug1'] = [\"Message \" + str(message)]\n\n    output['result'] = \"The result!\"\n    output['data'] = {'key': 'result'}\n\n    argstr = ' '.join(args)\n    message = \"TEXT:\" + str(message) + argstr\n    value = randrange(10)\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'temperature', 'value': value}\n    print(\"doSomething: GRAPH COMPLETE!\")\n    print(\"doSomething: VALUE\", value)\n    # raise Exception()\n    return {'message': message, 'graph': graph}\n\n\ndef do_this(message, *args, plugs={}, output={}, **kwargs):\n    from random import randrange\n\n    print(\"Do this!\", message)\n\n    argstr = ' '.join(args)\n    message = \"Do this String: \" + str(message) + argstr\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'distance', 'value': randrange(50)}\n    print(\"doThis: GRAPH CREATED!\")\n    return {'message': message, 'graph': graph}\n\n\ndef do_that(message, *args, plugs={}, output={}, **kwargs):\n    print(\"Do THAT!\", message)\n\n    argstr = ' '.join(args)\n    return \"Do THAT: \" + str(message) + argstr\n"
		},
		{
			"icon": "fab fa-python",
			"style": "",
			"type": "script",
			"name": "Script",
			"label": "Script",
			"description": "A script description",
			"package": "my.python.package",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 1776,
			"top": 105,
			"x": 1745,
			"y": 103.5,
			"id": "4fc78ada-5fe9-40f8-952f-378829575be5",
			"titletab": false,
			"receipt": "2023-01-26T19:51:58.932Z",
			"notes": "",
			"version": "v1.2.2",
			"perworker": true,
			"ratelimit": "60",
			"websocket": "ws://localhost:3003",
			"bandwidth": true,
			"requirements": "",
			"gittag": "",
			"container": true,
			"imagerepo": "local",
			"containerimage": "pyfi/processors:latest",
			"environment": "",
			"usegit": true,
			"enabled": true,
			"endpoint": false,
			"beat": false,
			"streaming": true,
			"api": "/api/processor",
			"concurrency": 3,
			"cron": "* * * * *",
			"interval": -1,
			"useschedule": false,
			"commit": "",
			"gitrepo": "https://github.com/radiantone/pyfi-processors#egg=ext-processor",
			"modulepath": "ext/processors/sample.py",
			"readwrite": 0,
			"status": "stopped",
			"code": "def open_url(url):\n    from pyodide.http import open_url\n    import json\n    \n    return json.loads(open_url(url).read())\n\ndef fetch():\n    url = \"http://worldtimeapi.org/api/ip\"\n\n    plugs['route A'] = {'some':'data'}\n    return open_url(url)\n    \ndef add_data(data):\n    data['add'] = 'newdata'\n\n    return data\n\ndef emit_one(one, *args, plugs={}, output={}, **kwargs):\n    \"\"\" emit one \"\"\"\n    if one: return one\n    return 1\n\n\ndef emit_two(two, *args, plugs={}, output={}, **kwargs):\n    if two: return two\n    return 5\n\n\ndef add_two(one, two, *args, plugs={}, output={}, **kwargs):\n    return int(one) + int(two)\n\n\ndef emit_add(one, five, *args, plugs={}, output={}, **kwargs):\n    print(\"EMIT_ADD: \", int(one) + int(five))\n    return int(one) + int(five)\n\n\ndef do_something(message, *args, plugs={}, output={}, **kwargs):\n    \"\"\" do_something \"\"\"\n    from random import randrange\n\n    print(\"PLUGS:\", plugs)\n    print(\"DO SOMETHING ELSE!\")\n    print(\"Message:\", message)\n\n    plugs['plug1'] = [\"Message \" + str(message)]\n\n    output['result'] = \"The result!\"\n    output['data'] = {'key': 'result'}\n\n    argstr = ' '.join(args)\n    message = \"TEXT:\" + str(message) + argstr\n    value = randrange(10)\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'temperature', 'value': value}\n    print(\"doSomething: GRAPH COMPLETE!\")\n    print(\"doSomething: VALUE\", value)\n    # raise Exception()\n    return {'message': message, 'graph': graph}\n\n\ndef do_this(message, *args, plugs={}, output={}, **kwargs):\n    from random import randrange\n\n    print(\"Do this!\", message)\n\n    argstr = ' '.join(args)\n    message = \"Do this String: \" + str(message) + argstr\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'distance', 'value': randrange(50)}\n    print(\"doThis: GRAPH CREATED!\")\n    return {'message': message, 'graph': graph}\n\n\ndef do_that(message, *args, plugs={}, output={}, **kwargs):\n    print(\"Do THAT!\", message)\n\n    argstr = ' '.join(args)\n    return \"Do THAT: \" + str(message) + argstr\n"
		},
		{
			"icon": "fab fa-python",
			"style": "",
			"type": "script",
			"name": "Script",
			"label": "Script",
			"description": "A script description",
			"package": "my.python.package",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 1784,
			"top": 612,
			"x": 1774,
			"y": 568.5,
			"id": "a7858ae7-6bc7-47b0-a66c-af04dc7d9c5a",
			"titletab": false,
			"receipt": "2023-01-26T19:52:01.776Z",
			"notes": "",
			"version": "v1.2.2",
			"perworker": true,
			"ratelimit": "60",
			"websocket": "ws://localhost:3003",
			"bandwidth": true,
			"requirements": "",
			"gittag": "",
			"container": true,
			"imagerepo": "local",
			"containerimage": "pyfi/processors:latest",
			"environment": "",
			"usegit": true,
			"enabled": true,
			"endpoint": false,
			"beat": false,
			"streaming": true,
			"api": "/api/processor",
			"concurrency": 3,
			"cron": "* * * * *",
			"interval": -1,
			"useschedule": false,
			"commit": "",
			"gitrepo": "https://github.com/radiantone/pyfi-processors#egg=ext-processor",
			"modulepath": "ext/processors/sample.py",
			"readwrite": 0,
			"status": "stopped",
			"code": "def open_url(url):\n    from pyodide.http import open_url\n    import json\n    \n    return json.loads(open_url(url).read())\n\ndef fetch():\n    url = \"http://worldtimeapi.org/api/ip\"\n\n    plugs['route A'] = {'some':'data'}\n    return open_url(url)\n    \ndef add_data(data):\n    data['add'] = 'newdata'\n\n    return data\n\ndef emit_one(one, *args, plugs={}, output={}, **kwargs):\n    \"\"\" emit one \"\"\"\n    if one: return one\n    return 1\n\n\ndef emit_two(two, *args, plugs={}, output={}, **kwargs):\n    if two: return two\n    return 5\n\n\ndef add_two(one, two, *args, plugs={}, output={}, **kwargs):\n    return int(one) + int(two)\n\n\ndef emit_add(one, five, *args, plugs={}, output={}, **kwargs):\n    print(\"EMIT_ADD: \", int(one) + int(five))\n    return int(one) + int(five)\n\n\ndef do_something(message, *args, plugs={}, output={}, **kwargs):\n    \"\"\" do_something \"\"\"\n    from random import randrange\n\n    print(\"PLUGS:\", plugs)\n    print(\"DO SOMETHING ELSE!\")\n    print(\"Message:\", message)\n\n    plugs['plug1'] = [\"Message \" + str(message)]\n\n    output['result'] = \"The result!\"\n    output['data'] = {'key': 'result'}\n\n    argstr = ' '.join(args)\n    message = \"TEXT:\" + str(message) + argstr\n    value = randrange(10)\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'temperature', 'value': value}\n    print(\"doSomething: GRAPH COMPLETE!\")\n    print(\"doSomething: VALUE\", value)\n    # raise Exception()\n    return {'message': message, 'graph': graph}\n\n\ndef do_this(message, *args, plugs={}, output={}, **kwargs):\n    from random import randrange\n\n    print(\"Do this!\", message)\n\n    argstr = ' '.join(args)\n    message = \"Do this String: \" + str(message) + argstr\n    graph = {'tag': {'name': 'tagname', 'value': 'tagvalue'}, 'name': 'distance', 'value': randrange(50)}\n    print(\"doThis: GRAPH CREATED!\")\n    return {'message': message, 'graph': graph}\n\n\ndef do_that(message, *args, plugs={}, output={}, **kwargs):\n    print(\"Do THAT!\", message)\n\n    argstr = ' '.join(args)\n    return \"Do THAT: \" + str(message) + argstr\n"
		},
		{
			"style": "",
			"type": "border",
			"name": "Pharmacy Systems",
			"label": "Border",
			"left": 464,
			"top": 88,
			"x": 331,
			"y": 91.5,
			"id": "a2e9aba3-6420-4f6d-b9f4-089203447ffd",
			"w": 500,
			"h": 740,
			"color": ""
		},
		{
			"style": "",
			"type": "border",
			"name": "Insurance Systems",
			"label": "Border",
			"left": 1735,
			"top": 85,
			"x": 1387,
			"y": 87.5,
			"id": "69578f91-ef2b-4f72-860f-1640af6a5065",
			"w": 500,
			"h": 780,
			"color": ""
		},
		{
			"icon": "icon-label",
			"style": "size:50px",
			"type": "note",
			"name": "Label",
			"label": "Label",
			"disabled": false,
			"columns": [],
			"properties": [],
			"left": 1076,
			"top": 664,
			"x": 1147,
			"y": 121.5,
			"id": "69fc2919-e2bd-458c-8050-dff56c036bcf",
			"note": "Health Care Broker System"
		}
	],
	"edges": [],
	"ports": [],
	"groups": []
}
