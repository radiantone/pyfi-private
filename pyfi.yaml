version: '1.0'

# This creates database records and a running scheduler will do the deployments
network:
  name: network-1
  queues:
    pyfi.queue1:
    pyfi.queue2:
    pyfi.queue3:
  nodes:
    phoenix:
      clean: true
      enabled: true
      hostname: phoenix
      ssh:
        key: '/home/darren/.ssh/id_rsa.pub'
        user: 'darren'
      path: /home/darren/node1
      ini: /home/darren/pyfi.ini
      polar: /home/darren/pyfi.polar
      agents:
        agent1:
          parameters:
            pool: 5
            size: 10
          processors:
            proc3: 
                container_image: pyfi/processor
                use_container: true
                branch: main
                pyfirepo: 'https://radiantone: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@github.com/radiantone/pyfi-private#egg=pyfi'
                gitrepo: 'https://radiantone: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@github.com/radiantone/pyfi-processors#egg=pyfi-processor'
                commit:
                module: pyfi.processors.sample
                beat: true
                workers: 2
                sockets:
                  pyfi.processors.sample.emit_one:
                    interval: -1
                    queue: 
                      name: pyfi.queue1
                    task:
                      function: 
                        name: emit_one
                  pyfi.processors.sample.emit_two:
                    queue: 
                      name: pyfi.queue3
                    task:
                      function: 
                        name: emit_two    
      services:
        docker:
          websockets:
            daemon: true
            environment:
              - LISTEN_PROCESSOR=proc1
              - LISTEN_CHANNEL=task
    agent2:
      clean: false
      hostname: agent2
      ini: /home/darren/pyfi.ini
      polar: /home/darren/pyfi.polar
      ssh:
        key: '/home/darren/.ssh/id_rsa.pub'
        user: 'darren'
      path: /home/darren/node1
      agents:
        agent1:
          parameters:
            pool: 5
            size: 10
          processors:
            proc4: 
              branch: main
              pyfirepo: 'https://radiantone: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@github.com/radiantone/pyfi-private#egg=pyfi'
              gitrepo: 'https://radiantone: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@github.com/radiantone/pyfi-processors#egg=pyfi-processor'
              commit:
              module: pyfi.processors.sample
              beat: false
              workers: 1
              sockets:
                pyfi.processors.sample.add_two:
                  queue: 
                    name: pyfi.queue2
                  task:
                    function: 
                      name: add_two
                      arguments: true
                      resetonexecute: true

  plugs:
    plug1:
      source: pyfi.processors.sample.emit_one
      target: pyfi.processors.sample.add_two
      argument: one
      queue:
        name: pyfi.queue4
    plug2:
      source: pyfi.processors.sample.emit_two
      target: pyfi.processors.sample.add_two
      argument: two
      queue:
        name: pyfi.queue5
# This will create work records which the scheduler will deploy
work:
  
# This will create scheduled tasks (i.e. jobs)
jobs:

# This will create immediate executions using the API models
executions: