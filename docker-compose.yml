version: '3.9'

services:

  clientsocket:
    build:
      context: socket
      dockerfile: Dockerfile
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/clientsocket:develop
    restart: always
    container_name: clientsocket
    ports:
      - 3003:3003

  globalsocket:
    build:
      context: docker/websockets
      dockerfile: Dockerfile
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/websockets:develop
    restart: always
    container_name: globalsocket
    environment:
      - PYFI_CHANNEL=global
    ports:
      - 3009:3000

  websockets2:
    build:
      context: docker/websockets
      dockerfile: Dockerfile
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/websockets:develop
    restart: always
    container_name: websockets2
    environment:
      - PYFI_CHANNEL=proc2.task
    ports:
      - 3002:3000

  websockets:
    build:
      context: docker/websockets
      dockerfile: Dockerfile
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/websockets:develop
    restart: always
    container_name: websockets
    environment:
      - PYFI_CHANNEL=proc1.task
    ports:
      - 3000:3000

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  grafana:
      image: grafana/grafana:latest
      container_name: grafana
      volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning:/etc/grafana/provisioning
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin
        - GF_USERS_ALLOW_SIGN_UP=false
      restart: unless-stopped
      ports:
        - 3001:3000

  influxdb:
    image: influxdb:2.0
    container_name: influxdb
    restart: always
    ports:
      - 8083:8083
      - 8086:8086
      - 8088:8088
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=pyfi
      - DOCKER_INFLUXDB_INIT_BUCKET=pyfi
    volumes:
      - influxdb_data:/var/lib/influxdb2

  mindsdb:
    image: mindsdb/mindsdb
    container_name: mindsdb
    restart: always
    environment:
      - "MINDSDB_STORAGE_DIR=/root/data"
    volumes:
      - mindsdb:/root/data
    links:
      - postgresdb
    depends_on:
      - postgresdb
    ports:
      - "47334:47334"
      - "47335:47335"

  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
      tags:
        - pyfi/processor:local
    container_name: processor
    image: pyfi/processor:latest
    environment:
      - "EVENTS=events"

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: api
    restart: always
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/api:develop
    environment:
      - "EVENTS=events"
      - "CB_KEY=test_cd3cu6vRcuyFScdCW8W8Y3QU1HmrVZ7AaXEm"
      - "CB_SITE=elasticcode-test"
      - "AUTH0_DOMAIN=dev-3583lxyoewhh4ymf.us.auth0.com"
      - "API_AUDIENCE=https://dev.elasticcode.ai/"
      - "API_HOST=api.elasticcode.ai"
      - "MINDSDB_SERVER=http://mindsb:47334"
    ports:
      - 8000:8003
    depends_on:
      - redis
      - postgresdb
    volumes:
      - /tmp:/tmp
      - ./conf/supervisord-agent.conf:/etc/supervisor/conf.d/supervisord.conf
      - /var/run/docker.sock:/var/run/docker.sock

  logs:
    build:
      context: .
      dockerfile: docker/Dockerfile.logs
    container_name: logs
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/logs:develop

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.com
      - PGADMIN_DEFAULT_PASSWORD=SuperSecret
    volumes:
      - ./tmp:/tmp
    ports:
      - 8008:80

  flower:
    image: mher/flower:latest
    container_name: flower
    hostname: flower
    environment:
      - CELERY_BROKER_URL=pyamqp://rabbitmq
      - CELERY_ACCEPT_CONTENT=['json']
      - CELERY_TASK_SERIALIZER='json'
      - CELERY_RESULT_SERIALIZER='json'
      - FLOWER_PORT=8888
    ports:
      - 8888:8888

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3.12.1-management-alpine
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.rabbitmq
    volumes:
      - ./conf/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./data:/var/lib/rabbitmq/mnesia/
    environment:
      - RABBITMQ_ERLANG_COOKIE=cluster_cookie
      - CLUSTERED=true
    ports:
      - 5671:5671
      - 5672:5672
      - 15672:15672
      - 4369:4369

  rabbitmq2:
    container_name: rabbitmq2
    hostname: rabbitmq2
    image: rabbitmq:3.12.1-management-alpine
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.rabbitmq
    volumes:
      - ./conf/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./conf/rabbit-cluster.sh:/tmp/rabbit-cluster.sh
    links:
      - rabbitmq
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_ERLANG_COOKIE=cluster_cookie
      - CLUSTERED=true
      - CLUSTER_WITH=rabbitmq
      - RAM_NODE=true
    ports:
      - "5673:5672"
      - "15673:15672"

  postgresdb:
    container_name: postgresdb
    image: postgres:14
    hostname: postgresdb
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pyfi101
      POSTGRES_DB: pyfi
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    volumes:
      - "pgdata:/var/lib/postgresql/data"
      - ./conf/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 6

  redis:
    container_name: redis
    hostname: redis
    image: redislabs/redismod  #redis:6.2.6
    restart: always
    ports:
      - 6379:6379

  insights:
    container_name: insights
    depends_on:
      - redis
    image: redislabs/redisinsight:latest
    ports:
      - 8001:8001
    #volumes:
    #  - ./data/redisinsight:/db

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db

  web:
    image: elasticcode/web:develop
    container_name: web
    restart: always
    build:
      context: /home/darren/git/elasticcode-web
    profiles:
      - web
    ports:
      - 8443:443
      - 8180:80

  nginx:
    image: 013035288901.dkr.ecr.us-east-1.amazonaws.com/nginx:develop
    container_name: nginx
    restart: always
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/mime.types:/etc/nginx/conf/mime.types
      - ./logs:/etc/nginx/logs
    depends_on:
      - rabbitmq
      - rabbitmq2
      - clientsocket
    links:
      - clientsocket
      - rabbitmq2
      - rabbitmq
    ports:
      - 80:80
      - 443:443

volumes:
  mindsdb:
  mongodb_data_container:
  pgdata:
  influxdb_data:
    driver: local
  grafana_data: {}
