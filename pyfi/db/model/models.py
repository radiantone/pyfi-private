
"""
Class database model definitions
"""
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.schema import CreateColumn
from sqlalchemy import Enum, Table, Column, Integer, LargeBinary, Text, String, ForeignKey, DateTime, Boolean, Float, Sequence, INTEGER, literal_column, select, column
import logging
from sqlalchemy.dialects.postgresql import DOUBLE_PRECISION

from datetime import datetime

from sqlalchemy.orm import relationship
from sqlalchemy.orm import declarative_base
from sqlalchemy import create_engine

Base = declarative_base()


@compiles(CreateColumn, 'postgresql')
def use_identity(element, compiler, **kw):
    text = compiler.visit_create_column(element, **kw)
    text = text.replace("SERIAL", "INT GENERATED BY DEFAULT AS IDENTITY")
    return text


class BaseModel(Base):
    """
    Docstring
    """
    __abstract__ = True
    id = Column(String(40), autoincrement=False, default=literal_column(
        'uuid_generate_v4()'), unique=True, primary_key=True)
    name = Column(String(80), unique=True, nullable=False, primary_key=True)
    owner = Column(String(40), default=literal_column('current_user'))
    lastupdated = Column(DateTime, default=datetime.now,
                         onupdate=datetime.now, nullable=False)


schedule_types = [
    'CRON',
    'INTERVAL'
]

strategies = [
    'BALANCED',
    'EFFICIENT'
]

rights = ['ALL',
          'CREATE',
          'READ',
          'UPDATE',
          'DELETE',

          'DB_DROP',
          'DB_INIT',

          'START_AGENT',

          'RUN_TASK',
          'CANCEL_TASK',

          'START_PROCESSOR',
          'STOP_PROCESSOR',
          'PAUSE_PROCESSOR',
          'RESUME_PROCESSOR',
          'LOCK_PROCESSOR',
          'UNLOCK_PROCESSOR',
          'VIEW_PROCESSOR',
          'VIEW_PROCESSOR_CONFIG',
          'VIEW_PROCESSOR_CODE',
          'EDIT_PROCESSOR_CONFIG',
          'EDIT_PROCESSOR_CODE'

          'LS_PROCESSORS',
          'LS_USERS',
          'LS_USER',
          'LS_PLUGS',
          'LS_SOCKETS',
          'LS_QUEUES',
          'LS_AGENTS',
          'LS_NODES',
          'LS_SCHEDULERS',
          'LS_WORKERS',

          'ADD_PROCESSOR',
          'ADD_AGENT',
          'ADD_NODE',
          'ADD_PLUG',
          'ADD_PRIVILEGE',
          'ADD_QUEUE',
          'ADD_ROLE',
          'ADD_SCHEDULER',
          'ADD_SOCKET',
          'ADD_USER',

          'UPDATE_PROCESSOR',
          'UPDATE_AGENT',
          'UPDATE_NODE',
          'UPDATE_PLUG',
          'UPDATE_PRIVILEGE',
          'UPDATE_QUEUE',
          'UPDATE_ROLE',
          'UPDATE_SCHEDULER',
          'UPDATE_SOCKET',
          'UPDATE_USER',

          'DELETE_PROCESSOR',
          'DELETE_AGENT',
          'DELETE_NODE',
          'DELETE_PLUG',
          'DELETE_PRIVILEGE',
          'DELETE_QUEUE',
          'DELETE_ROLE',
          'DELETE_SCHEDULER',
          'DELETE_SOCKET',
          'DELETE_USER',

          'READ_PROCESSOR',
          'READ_AGENT',
          'READ_NODE',
          'READ_PLUG',
          'READ_PRIVILEGE',
          'READ_QUEUE',
          'READ_ROLE',
          'READ_SCHEDULER',
          'READ_SOCKET',
          'READ_USER'
          ]


class PrivilegeModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'privilege'

    right = Column('right', Enum(*rights, name='right'))

    def __repr__(self):
        return '{}:{}:{}:{}'.format(self.id, self.name, self.lastupdated)


role_privileges = Table('role_privileges', Base.metadata,
                        Column('role_id', ForeignKey('role.id')),
                        Column('privilege_id', ForeignKey('privilege.id'))
                        )


class RoleModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'role'

    privileges = relationship("PrivilegeModel",
                              secondary=role_privileges)

    def __repr__(self):
        return '{}:{}:{}:{}'.format(self.id, self.name, self.lastupdated)


user_privileges = Table('user_privileges', Base.metadata,
                        Column('user_id', ForeignKey('user.id')),
                        Column('privilege_id', ForeignKey('privilege.id'))
                        )

user_roles = Table('user_roles', Base.metadata,
                   Column('user_id', ForeignKey('user.id')),
                   Column('role_id', ForeignKey('role.id'))
                   )


class UserModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'user'
    email = Column(String(120), unique=True, nullable=False)
    password = Column(String(20), unique=False, nullable=False)

    privileges = relationship("PrivilegeModel",
                              secondary=user_privileges)

    roles = relationship("RoleModel",
                         secondary=user_roles)

    def __repr__(self):
        return '{}:{}:{}:{}:{}'.format(self.id, self.name, self.email, self.roles, self.lastupdated)


class FlowModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'flow'
    processors = relationship(
        'ProcessorModel', backref='flow', lazy=True)

    def __repr__(self):
        return '<Name %r>' % self.name


class AgentModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'agent'
    hostname = Column(String(60))
    status = Column(String(20), nullable=False)
    cpus = Column(Integer)
    port = Column(Integer)

    worker = relationship(
        'WorkerModel', back_populates='agent', uselist=False, cascade="all, delete-orphan")

    node_id = Column(String(40), ForeignKey('node.id'),
                     nullable=False)

    def __repr__(self):
        return '{}:{}:{}:{}:{}'.format(self.id, self.cpus, self.status, self.name, self.hostname)


class ActionModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'action'
    status = Column(String(20), nullable=False)
    params = Column(String(80))

    # host, worker, processor, queue, or all
    target = Column(String(20), nullable=False)

    def __repr__(self):
        return '<Name %r>' % self.name


class WorkerModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'worker'
    status = Column(String(20), nullable=False)
    backend = Column(String(40), nullable=False)
    broker = Column(String(40), nullable=False)
    requested_status = Column(String(40))
    concurrency = Column(Integer)
    process = Column(Integer)
    hostname = Column(String(60))

    processor_id = Column(String(40), ForeignKey(
        'processor.id'), nullable=True)

    processor = relationship("ProcessorModel", back_populates="worker")

    agent_id = Column(String(40), ForeignKey('agent.id'),
                      nullable=False)

    agent = relationship("AgentModel", back_populates="worker")

    def __repr__(self):
        return '{}:{}:{}:{}:{}:{}:{}'.format(self.id, self.name, self.status, self.requested_status, self.concurrency, self.process, self.hostname)


class ProcessorModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'processor'
    requested_status = Column(String(20), nullable=False)
    status = Column(String(20), nullable=False)
    hostname = Column(String(60))
    module = Column(String(80), nullable=False)
    beat = Column(Boolean)
    #task = Column(String(80), nullable=False)
    gitrepo = Column(String(180))
    branch = Column(String(30))
    commit = Column(String(30))
    retries = Column(Integer)
    concurrency = Column(Integer)
    ratelimit = Column(String(10))
    timelimit = Column(Integer)
    ignoreresult = Column(Boolean)
    serializer = Column(String(10))
    backend = Column(String(80))
    ackslate = Column(Boolean)
    trackstarted = Column(Boolean)
    retrydelay = Column(Integer)

    flow_id = Column(String(40), ForeignKey(
        'flow.id'), nullable=True)

    worker = relationship(
        'WorkerModel', back_populates='processor', uselist=False, lazy=True, cascade="all, delete-orphan")

    plugs = relationship('PlugModel', backref='processor',
                         lazy=True, cascade="all, delete-orphan")

    sockets = relationship('SocketModel', backref='processor',
                           lazy=True, cascade="all, delete-orphan")

    def __repr__(self):
        return '{}:{}:{}:{}:{}:{}:{}:{}:{} Plugs:{} Sockets:{}'.format(self.id, self.name, self.beat, self.lastupdated, self.hostname, self.concurrency, self.requested_status, self.status, self.worker, self.plugs, self.sockets)


class JobModel(Base):
    __tablename__ = 'jobs'

    id = Column(String(200), primary_key=True)
    next_run_time = Column(DOUBLE_PRECISION)
    job_state = Column(LargeBinary)


class CallModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'call'

    name = Column(String(80), unique=False, nullable=False)
    state = Column(String(10))
    parent = Column(String(80), nullable=True)
    resultid = Column(String(80))
    celeryid = Column(String(80))

    task_id = Column(String(40), ForeignKey('task.id'),
                     nullable=False)
    started = Column(DateTime, default=datetime.now, nullable=False)
    finished = Column(DateTime)

    def __repr__(self):
        return '{}:{}:{}:{}:{}'.format(self.id, self.name, self.lastupdated, self.started, self.finished)


class SchedulerModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'scheduler'

    nodes = relationship('NodeModel', backref='scheduler', lazy=True)
    strategy = Column('strategy', Enum(*strategies, name='strategies'))

    def __repr__(self):
        return '{}:{}:{}'.format(self.id, self.name, self.lastupdated)


class SettingsModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'settings'
    value = Column(String(80), nullable=False)

    def __repr__(self):
        return '<Name %r>' % self.name


class NodeModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'node'
    hostname = Column(String(60))
    scheduler_id = Column(String(40), ForeignKey('scheduler.id'),
                          nullable=True)

    memsize = Column(String(60))
    freemem = Column(String(60))
    memused = Column(Float)

    disksize = Column(String(60))
    diskusage = Column(String(60))
    cpus = Column(Integer)
    cpuload = Column(Float)

    agent = relationship(
        'AgentModel', backref='node', uselist=False, cascade="all, delete-orphan")

    def __repr__(self):
        return '{}:{}:{}'.format(self.id, self.name, self.hostname)


class TaskModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'task'

    module = Column(String(120), nullable=False, primary_key=True)
    gitrepo = Column(String(180), nullable=False, primary_key=True)
    '''
    Tasks can also be mixed-in to the module loaded by the processor as new functions
    using the code field, which must contain a function
    '''
    mixin = Column(Boolean, default=False)
    code = Column(Text)  # Source code of function

    sockets = relationship("SocketModel", back_populates="task")

    def __repr__(self):
        return '<Name %r>' % self.name


class LogModel(Base):
    """
    Docstring
    """
    __tablename__ = 'log'
    id = Column(String(40), primary_key=True)
    text = Column(String(80), nullable=False)

    def __repr__(self):
        return '<id %r>' % self.id


sockets_queues = Table('sockets_queues', Base.metadata,
                       Column('socket_id', ForeignKey('socket.id')),
                       Column('queue_id', ForeignKey('queue.id'))
                       )

plugs_sockets = Table('plugs_sockets', Base.metadata,
                      Column('plug_id', ForeignKey(
                          'plug.id'), primary_key=True),
                      Column('socket_id', ForeignKey(
                          'socket.id'), primary_key=True)
                      )


class SocketModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'socket'
    requested_status = Column(String(20), nullable=False)
    status = Column(String(20), nullable=False)
    processor_id = Column(String(40), ForeignKey('processor.id'),
                          nullable=False)
                        
    schedule_type = Column('schedule_type', Enum(
        *schedule_types, name='schedule_type'))

    scheduled = Column(Boolean)
    cron = Column(String(20))

    interval = Column(Integer)
    task_id = Column(String(40), ForeignKey('task.id'))
    task = relationship("TaskModel", back_populates="sockets", single_parent=True,
                        cascade="delete, delete-orphan")

    plugs = relationship("PlugModel", back_populates="sockets",
                         secondary=plugs_sockets)

    queue = relationship(
        'QueueModel', secondary=sockets_queues, uselist=False)

    def __repr__(self):
        return '{}:{}:{}:{}:Queue:{} - Processor:{}'.format(self.id, self.requested_status, self.status, self.name, self.queue.name, self.processor_id)


plugs_queues = Table('plugs_queues', Base.metadata,
                     Column('plug_id', ForeignKey('plug.id')),
                     Column('queue_id', ForeignKey('queue.id'))
                     )


class PlugModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'plug'
    requested_status = Column(String(20), nullable=False)
    status = Column(String(20), nullable=False)

    processor_id = Column(String(40), ForeignKey('processor.id'),
                          nullable=False)

    sockets = relationship("SocketModel", back_populates="plugs",
                           secondary=plugs_sockets)
    queue = relationship(
        'QueueModel', secondary=plugs_queues, uselist=False)

    def __repr__(self):
        return '{}:{}:{}:{}:Queue:{} - Processor:{}'.format(self.id, self.requested_status, self.status, self.name, self.queue.name, self.processor_id)


class QueueModel(BaseModel):
    """
    Docstring
    """
    __tablename__ = 'queue'
    requested_status = Column(String(20), nullable=False)
    qtype = Column(String(20), nullable=False, default='direct')
    status = Column(String(20), nullable=False)
    durable = Column(Boolean, default=True)
    reliable = Column(Boolean, default=True)
    auto_delete = Column(Boolean, default=True)
    max_length = Column(Integer, default=-1)
    max_length_bytes = Column(Integer, default=-1)
    message_ttl = Column(Integer, default=3000)
    expires = Column(Integer, default=3000)

    def __repr__(self):
        return '{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}:{}'.format(self.id, self.qtype, self.requested_status,
                                                               self.status, self.name, self.lastupdated,
                                                               self.durable,
                                                               self.reliable,
                                                               self.auto_delete,
                                                               self.max_length,
                                                               self.max_length_bytes,
                                                               self.message_ttl,
                                                               self.expires)


class QueueLogModel(Base):
    """
    Docstring
    """
    __tablename__ = 'queuelog'
    id = Column(String(40), primary_key=True)
    name = Column(String(80), unique=True, nullable=False)
    date = Column(DateTime, default=datetime.now,
                  onupdate=datetime.now, nullable=False)
    text = Column(String(80), nullable=False)

    # processor
    # queue

    task = Column(String(80), nullable=False)
    type = Column(String(20), nullable=False)
    quantity = Column(Float)

    def __repr__(self):
        return '{}:{}:{}:{}:{}'.format(self.id, self.name, self.date, self.text)
