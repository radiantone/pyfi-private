- Depending on what type of processor it is (e.g. script, gate, router) there is different wrapped function that conducts the business of the processor before invoking the desired function



- For a given socket, it can be configured to wait on all inputs or not
    - If it waits on all inputs, then the worker will store the incoming request parameters
    until all the attached plugs deliver their requests and then pass all the parameters to
    the task function as *args which will trigger the task callbacks and propagate the data flow.



RESIDENT CODE/TASKS

- From python, pass a workflow to a Task() constructor for it to be injected into the network.
The Task() object will take the source code and store it with the task. The un scheduled task object
will be picked up by the scheduler and assigned to a worker based on the load of that worker.

- A task with a given module can only be assigned to a processor with the same module.

MISC

- Addressable namespace for pyfi topology. e.g.
    - flow.processor.socket.task.call.event
    - flow.processor.socket.plug.socket.task.call.event


- USE ML to try and learn the equation associated with a data stream
- Given a data stream and numerical point values at different times, create a regression model that can predict the point value, given the data stream.
- Data flows feed into web socket channels that are fronted by dashboards and charts
    - Pyfi Charts is a layer on top of Pyfi that connects securely to the websocket feeds to plot data.
    - Create persistent dashboards with PYFI that connect to data processors in real time

SECURITY

Use OSO to implement access control logic based on privilege model.
For example,if one does not have access to a processor, then they don't have access to its sockets and tasks.
That kind of inference.

CONTAINERS 

Run agent workers inside lightweight prebuilt python container

SIMULATION 

What is the role/benefit of simulation on top of pyfi?
   e.g. simpy?

A simulation harness can model real world processes in an event driven way that 
can interact with pyfi objects. A simulation is a "type of flow" that specifies environmental classes, properties, etc that interact when the simulation is run.
To create a simulation, drag a simulation object onto the canvas. This is the entrypoint. Additional simulation type objects can be connected to the root simulation object
and their properties can be easily configured. You can create your own simulation classes and drop them onto the canvas.